[
  {
    "type": "shape_designer.figure.PolyRect",
    "id": "1b71bcf4-939c-5650-8a7e-68514e9d2149",
    "x": 3958,
    "y": 3965.5,
    "width": 84,
    "height": 69,
    "alpha": 1,
    "angle": 0,
    "userData": {
      "baseClass": "draw2d.SetFigure",
      "code": "/**\n * by 'Draw2D Shape Designer'\n *\n * Custom JS code to tweak the standard behaviour of the generated\n * shape. add your custome code and event handler here.\n *\n *\n */\ntestShape = testShape.extend({\n\n    init: function(attr, setter, getter){\n        var _this = this;\n        \n        this._super(attr, setter, getter);\n\n        this.on(\"change:userData.delay\",function(emitter, event){\n            var value = event.value;\n            _this.delayedValues = []; \n            _this.delayedValues.length = parseInt(parseInt(value)/10);\n            _this.pointer=0;\n            \n        });\n        this.attr({\n            resizeable:false,\n            \"userData.delay\":500\n        });\n        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());\n    },\n    \n    /**\n     * called every '10 [ms]' from the application.\n     * \n     **/\n    calculate:function()\n    {\n       this.getOutputPort(0).setValue(this.delayedValues[this.pointer]);\n       this.delayedValues[this.pointer] = this.getInputPort(0).getValue();\n       this.pointer = (this.pointer+1)%this.delayedValues.length; \n    },\n    \n    onStart:function()\n    {\n        this.currentTimer=0;\n    },\n    \n    onStop:function()\n    {\n    },\n\n    getParameterSettings: function()\n    {\n        return [\n        {\n            name:\"delay\",\n            label:\"Delay [ms]\",\n            property:{\n                type: \"integer\",\n                min: 10,\n                max: 15000,\n                increment:10\n        }\n        \n        }];\n    }\n\n});",
      "name": "Rectangle",
      "markdown": "# Clock Signal\n\nIn electronics and especially synchronous digital circuits, \na clock signal is a particular type of signal that \noscillates between a `high` and a `low` state and is \nutilized like a metronome to coordinate actions \nof digital circuits.\n\nThe hertz (symbol `Hz`) is the unit of frequency in the \nInternational System of Units (SI) and is defined as \none cycle per second. \n\nIt is named for Heinrich Rudolf Hertz, the first person \nto provide conclusive proof of the existence of \nelectromagnetic waves.",
      "type": "Output",
      "direction": 1
    },
    "cssClass": "shape_designer_figure_PolyRect",
    "ports": [],
    "bgColor": "#FFFFFF",
    "color": "#303030",
    "stroke": 1,
    "radius": 2,
    "dasharray": null,
    "vertices": [
      {
        "x": 4042,
        "y": 4034.5
      },
      {
        "x": 3958,
        "y": 4034.5
      },
      {
        "x": 3958,
        "y": 3965.5
      },
      {
        "x": 4042,
        "y": 3965.5
      }
    ],
    "blur": 0,
    "filters": [
      {
        "name": "shape_designer.filter.PositionFilter"
      },
      {
        "name": "shape_designer.filter.SizeFilter"
      },
      {
        "name": "shape_designer.filter.StrokeFilter"
      },
      {
        "name": "shape_designer.filter.FillColorFilter"
      },
      {
        "name": "shape_designer.filter.RadiusFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtPort",
    "id": "f4d5683a-7c42-8771-5df4-e4e9da5b8b46",
    "x": 4037.5,
    "y": 3996.45952,
    "width": 10,
    "height": 10,
    "alpha": 1,
    "angle": 0,
    "userData": {
      "baseClass": "draw2d.SetFigure",
      "code": "/**\n * by 'Draw2D Shape Designer'\n *\n * Custom JS code to tweak the standard behaviour of the generated\n * shape. add your custome code and event handler here.\n *\n *\n */\ntestShape = testShape.extend({\n\n    init: function(attr, setter, getter){\n        this._super(attr, setter, getter);\n\n        this.attr({resizeable:false});\n        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());\n\n        this.currentTimer=0;\n    },\n    \n    /**\n     * called every '10 [ms]' from the application. do a little bit calculation\n     * to change the state every 100ms (10Hz)\n     * \n     **/\n    calculate:function()\n    {\n       // 10 ticks every 10ms => 10Hz    \n       this.currentTimer = (this.currentTimer+1)%10; \n       if(this.currentTimer===0){\n           this.value = !this.value;\n           this.getOutputPort(0).setValue(this.value);\n       }\n    },\n    \n    onStart:function()\n    {\n        this.currentTimer=0;\n    },\n    \n    onStop:function()\n    {\n    },\n\n    getParameterSettings: function()\n    {\n        return [\n        {\n            name:\"delay\",\n            label:\"Delay [ms]\",\n            property:{\n                type: \"integer\",\n                min: 10,\n                max: 100,\n                increment:10\n        }\n        \n        }];\n    }\n\n});",
      "name": "output_0",
      "markdown": "# Clock Signal\n\nIn electronics and especially synchronous digital circuits, \na clock signal is a particular type of signal that \noscillates between a `high` and a `low` state and is \nutilized like a metronome to coordinate actions \nof digital circuits.\n\nThe hertz (symbol `Hz`) is the unit of frequency in the \nInternational System of Units (SI) and is defined as \none cycle per second. \n\nIt is named for Heinrich Rudolf Hertz, the first person \nto provide conclusive proof of the existence of \nelectromagnetic waves.",
      "type": "Output",
      "direction": 1
    },
    "cssClass": "shape_designer_figure_ExtPort",
    "ports": [],
    "bgColor": "#1C9BAB",
    "color": "#1B1B1B",
    "stroke": 1,
    "dasharray": null,
    "filters": [
      {
        "name": "shape_designer.filter.PositionFilter"
      },
      {
        "name": "shape_designer.filter.FanoutFilter"
      },
      {
        "name": "shape_designer.filter.PortDirectionFilter"
      },
      {
        "name": "shape_designer.filter.PortTypeFilter"
      },
      {
        "name": "shape_designer.filter.FillColorFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtPort",
    "id": "3dce50be-cb62-93ee-6ae9-8a903ea77fae",
    "x": 3948.5,
    "y": 3996.45952,
    "width": 10,
    "height": 10,
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "input_0",
      "type": "Input",
      "direction": 3,
      "fanout": 20
    },
    "cssClass": "shape_designer_figure_ExtPort",
    "ports": [],
    "bgColor": "#37B1DE",
    "color": "#1B1B1B",
    "stroke": 1,
    "dasharray": null,
    "filters": [
      {
        "name": "shape_designer.filter.PositionFilter"
      },
      {
        "name": "shape_designer.filter.FanoutFilter"
      },
      {
        "name": "shape_designer.filter.PortDirectionFilter"
      },
      {
        "name": "shape_designer.filter.PortTypeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLabel",
    "id": "0203a429-2c1f-4d7e-3a41-61aad199cb61",
    "x": 3990,
    "y": 3992,
    "width": 28.328125,
    "height": 21.359375,
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Label"
    },
    "cssClass": "shape_designer_figure_ExtLabel",
    "ports": [],
    "bgColor": "none",
    "color": "#1B1B1B",
    "stroke": 0,
    "radius": 0,
    "dasharray": null,
    "text": "Delay",
    "outlineStroke": 0,
    "outlineColor": "none",
    "fontSize": 11,
    "fontColor": "#D9D9D9",
    "fontFamily": null,
    "editor": "draw2d.ui.LabelInplaceEditor",
    "filters": [
      {
        "name": "shape_designer.filter.PositionFilter"
      },
      {
        "name": "shape_designer.filter.FontSizeFilter"
      },
      {
        "name": "shape_designer.filter.FontColorFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "d3f4301d-7c4a-ed21-8251-50473ab0c628",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "pulseline_top"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#000000",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3962.0022374999994,
        "y": 3985.2768799999976
      },
      {
        "x": 3969.309437499999,
        "y": 3985.2768799999976
      },
      {
        "x": 3969.3094374999987,
        "y": 3971.5062399999974
      },
      {
        "x": 3999.2756774999993,
        "y": 3971.8339199999978
      },
      {
        "x": 3999.2756774999993,
        "y": 3984.4924999999976
      },
      {
        "x": 4033.0655774999987,
        "y": 3984.820179999997
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": 2,
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      },
      {
        "name": "shape_designer.filter.RadiusFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "67f7e37e-c165-3c63-63e0-b47dc000ed8f",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "pulseline_bottom"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#000000",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3961.1039974999962,
        "y": 4024.694799999996
      },
      {
        "x": 3993.6425574999976,
        "y": 4024.694799999996
      },
      {
        "x": 3993.6425574999976,
        "y": 4011.907199999996
      },
      {
        "x": 4023.6087974999978,
        "y": 4011.579519999996
      },
      {
        "x": 4023.6087974999978,
        "y": 4024.238099999996
      },
      {
        "x": 4036.754857499997,
        "y": 4024.2380999999955
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": 2,
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      },
      {
        "name": "shape_designer.filter.RadiusFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "cb143409-9709-4790-4652-c8bad2c0e4ef",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#FF0569",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3969.0862287500013,
        "y": 3999.3450139999954
      },
      {
        "x": 3969.4139087500025,
        "y": 4007.9302300000027
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "81ff2cc0-a962-2fcd-861e-3d9671384541",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#FF0569",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3991.2526287500023,
        "y": 4003.50095
      },
      {
        "x": 3988.3854287500003,
        "y": 4007.7280220000002
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "68fbd21e-7171-5729-773d-887407bf5c72",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#FF0569",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3987.6013007500014,
        "y": 3999.998645999998
      },
      {
        "x": 3991.074708750001,
        "y": 4003.373749999998
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "2c8a2e58-a4a1-1a9f-3db4-173a42aa8d6f",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#FF0569",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3969.1710287500023,
        "y": 4003.6676700000035
      },
      {
        "x": 3991.1255887500006,
        "y": 4003.995350000001
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "f45ae44d-a82d-f2e6-28ae-59dde3f4c067",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#A8A8A8",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3968.916348593882,
        "y": 3986.1310879699163
      },
      {
        "x": 3968.9818845938835,
        "y": 4013.836431969917
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  },
  {
    "type": "shape_designer.figure.ExtLine",
    "id": "b4adf9ad-f0e9-fab0-f5a4-19740aa1fd89",
    "alpha": 1,
    "angle": 0,
    "userData": {
      "name": "Line"
    },
    "cssClass": "shape_designer_figure_ExtLine",
    "stroke": 1,
    "color": "#C9C9C9",
    "outlineStroke": 0,
    "outlineColor": "none",
    "policy": "draw2d.policy.line.VertexSelectionFeedbackPolicy",
    "vertex": [
      {
        "x": 3992.9844445938834,
        "y": 4023.189391969913
      },
      {
        "x": 3992.4110045938833,
        "y": 3992.797071969915
      }
    ],
    "router": "draw2d.layout.connection.VertexRouter",
    "radius": "",
    "filters": [
      {
        "name": "shape_designer.filter.StrokeFilter"
      }
    ]
  }
]